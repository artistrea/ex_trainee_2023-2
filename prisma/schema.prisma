// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Contact {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  phone     String?
  message   String
  createdAt DateTime @default(now())
}

model Restaurant {
  id          Int    @id @default(autoincrement())
  slug        String @unique
  name        String
  description String

  menu     Menu?
  canLogIn CanLogIn[]
  user     User[]
}

model Menu {
  id        Int    @id @default(autoincrement())
  className String @default("normal")

  categories   MenuCategory[]
  restaurant   Restaurant     @relation(fields: [restaurantId], references: [id])
  restaurantId Int            @unique
}

model MenuCategory {
  id             Int     @id @default(autoincrement())
  title          String
  titleClassName String  @default("normal")
  description    String?

  items  CategoryItem[]
  menu   Menu?          @relation(fields: [menuId], references: [id])
  menuId Int?
}

model CategoryItem {
  id           Int    @id @default(autoincrement())
  name         String
  priceInCents Int
  description  String
  className    String @default("normal")

  category   MenuCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int?
}

model CanLogIn {
  email String @id

  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
}

// MAGIA DO NEXTAUTH

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("admin")

  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])
  restaurantId Int?

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
